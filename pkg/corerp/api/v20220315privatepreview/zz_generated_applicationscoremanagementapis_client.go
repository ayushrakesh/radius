//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package v20220315privatepreview

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ApplicationsCoreManagementAPIsClient contains the methods for the ApplicationsCoreManagementAPIs group.
// Don't use this type directly, use NewApplicationsCoreManagementAPIsClient() instead.
type ApplicationsCoreManagementAPIsClient struct {
	host string
	rootScope string
	pl runtime.Pipeline
}

// NewApplicationsCoreManagementAPIsClient creates a new instance of ApplicationsCoreManagementAPIsClient with the specified values.
// rootScope - The scope in which the resource is present. For Azure resource this would be /subscriptions/{subscriptionID}/resourceGroups/{resourcegroupID}
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewApplicationsCoreManagementAPIsClient(rootScope string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ApplicationsCoreManagementAPIsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &ApplicationsCoreManagementAPIsClient{
		rootScope: rootScope,
		host: ep,
pl: pl,
	}
	return client, nil
}

// RecipeRegister - Register recipe for the provided environment.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-15-privatepreview
// environmentName - The name of the environment
// recipeParameter - Resource create parameters.
// options - ApplicationsCoreManagementAPIsClientRecipeRegisterOptions contains the optional parameters for the ApplicationsCoreManagementAPIsClient.RecipeRegister
// method.
func (client *ApplicationsCoreManagementAPIsClient) RecipeRegister(ctx context.Context, environmentName string, recipeParameter Recipe, options *ApplicationsCoreManagementAPIsClientRecipeRegisterOptions) (ApplicationsCoreManagementAPIsClientRecipeRegisterResponse, error) {
	req, err := client.recipeRegisterCreateRequest(ctx, environmentName, recipeParameter, options)
	if err != nil {
		return ApplicationsCoreManagementAPIsClientRecipeRegisterResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ApplicationsCoreManagementAPIsClientRecipeRegisterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ApplicationsCoreManagementAPIsClientRecipeRegisterResponse{}, runtime.NewResponseError(resp)
	}
	return client.recipeRegisterHandleResponse(resp)
}

// recipeRegisterCreateRequest creates the RecipeRegister request.
func (client *ApplicationsCoreManagementAPIsClient) recipeRegisterCreateRequest(ctx context.Context, environmentName string, recipeParameter Recipe, options *ApplicationsCoreManagementAPIsClientRecipeRegisterOptions) (*policy.Request, error) {
	urlPath := "/{rootScope}/providers/Applications.Core/environments/{environmentName}/registerRecipe"
	urlPath = strings.ReplaceAll(urlPath, "{rootScope}", client.rootScope)
	if environmentName == "" {
		return nil, errors.New("parameter environmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{environmentName}", url.PathEscape(environmentName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-15-privatepreview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, recipeParameter)
}

// recipeRegisterHandleResponse handles the RecipeRegister response.
func (client *ApplicationsCoreManagementAPIsClient) recipeRegisterHandleResponse(resp *http.Response) (ApplicationsCoreManagementAPIsClientRecipeRegisterResponse, error) {
	result := ApplicationsCoreManagementAPIsClientRecipeRegisterResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Recipe); err != nil {
		return ApplicationsCoreManagementAPIsClientRecipeRegisterResponse{}, err
	}
	return result, nil
}

